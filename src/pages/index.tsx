import type { NextPage } from 'next';
// import dynamic from 'next/dynamic';
import Head from 'next/head';
// import React from 'react';
import styles from '../styles/Home.module.css';
import { useState } from 'react';
import axios from 'axios';

// import ShyftLogo from '../styles/shyft_logo.svg';

import {
    Container,
    Heading,
    Flex,
    Box,
    FormControl,
    Select,
    Input,
    Button,
    Stack,
    Tabs,
    TabList,
    TabPanels,
    Tab,
    TabPanel,
    TabIndicator,
    Center,
    Spinner,
    Text,
    Link,
    Image,
} from '@chakra-ui/react';
import NftList from '../components/NftList';
import WithSubnavigation from '../components/Navbar';
import OwnerList from '../components/OwnerList';
// import Airdrop from '../components/Airdrop';
// import CreateCompressed from '../components/CreateCompressed';
import CreateNAirdrop from '../components/CreateNAirdrop';

const Home: NextPage = () => {
    const [address, setAddress] = useState('');
    const [network, setNetwork] = useState('devnet');
    const [version,setVersion] = useState("v3");
    const [allData, setAllData] = useState<any[]>([]);
    const [opsComplete, setOpsComplete] = useState<'unloaded' | 'loading' | 'loaded' |"error" >("unloaded");

    const setUpMonitors = async (address: string, network: string, version:string) => {
        var mintList: any[] = [];
        setOpsComplete('loading');
        try {
            await axios
            .request({
                url: '/api/candymachine-update-owners',
                method: 'POST',
                data: {
                    cm_address: address,
                    network: network,
                    version: version
                },
            })
            .then((res) => {
                if (res.data.success) mintList = res.data.result ?? [];
            })
            .catch((err) => {
                console.log(err);
                mintList = [];
            });

            // console.log('Function complete: ', mintList);
            if (mintList.length > 0) {
                await axios
                .request({
                    url: '/api/update-mints',
                    method: 'POST',
                    data: {
                        reference_address: address,
                        create_callbacks_on: mintList,
                        network: network,
                    },
                })
                .then((res) => {
                    // if(res.data.success)
                    //     setOpsComplete('loaded');
                    console.log("Database updated");
                })
                .catch((err) => {
                    console.log(err);
                    setOpsComplete("error");
                    throw err;
                });
            await new Promise(r => setTimeout(r, 500)); //use this if you have a rate limited API Key
            await axios
                .request({
                    url: '/api/create-callback',
                    method: 'POST',
                    data: {
                        reference_address: address,
                        create_callbacks_on: mintList,
                        network: network,
                    },
                })
                .then((res) => {
                    if (res.data.success) setOpsComplete('loaded');
                })
                .catch((err) => {
                    console.log(err)
                    setOpsComplete("error");
                    throw err;
                });
            }
            else
            {
                setOpsComplete("error");
            } 
        } catch (error:any) {
            console.log(error.message);
            setOpsComplete("error");
        }  
    };

    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                {/* <link rel="icon" href="/favicon.ico" /> */}
            </Head>
            <Box width={'100%'} bgGradient="linear(to-br, #ec008cdd, #fc6767dd)" as="div">
                <WithSubnavigation />
                <Container maxW="6xl" py={'60px'}>
                    <Flex align={'center'} justify={'center'}>
                        <Container maxW={'5xl'} rounded={'lg'} p={6} pb={20} flexDirection={'column'}>
                            <Heading
                                as={'h2'}
                                fontSize={{ base: '2xl', lg: '4xl' }}
                                fontWeight={400}
                                textAlign={'center'}
                                mb={5}
                                color={'white'}
                            >
                                Search and Monitor NFT collections
                            </Heading>
                            <Stack direction={{ base: 'column', md: 'row' }} as={'form'} spacing={'12px'}>
                                <FormControl>
                                    <Input
                                        variant={'solid'}
                                        borderWidth={1}
                                        color={'gray.800'}
                                        _placeholder={{
                                            color: 'gray.400',
                                            fontSize: 'sm',
                                        }}
                                        borderColor={'gray.300'}
                                        id={'email'}
                                        type={'text'}
                                        placeholder={'Enter Candy Machine Address'}
                                        aria-label={'Enter Candy Machine Address'}
                                        value={address}
                                        onChange={(e) => setAddress(e.target.value)}
                                    />
                                </FormControl>
                                <FormControl w={{ base: '100%', md: '20%' }}>
                                    <Select
                                        value={version}
                                        onChange={(e) => setVersion(e.target.value)}
                                        variant="outline"
                                        color={'white'}
                                    >
                                        <option style={{ color: '#fff', backgroundColor: '#ED64A6' }} value="v3">
                                            v3
                                        </option>
                                        <option style={{ color: '#fff', backgroundColor: '#ED64A6' }} value="v2">
                                            v2
                                        </option>
                                    </Select>
                                </FormControl>
                                <FormControl w={{ base: '100%', md: '20%' }}>
                                    <Select
                                        value={network}
                                        onChange={(e) => setNetwork(e.target.value)}
                                        variant="outline"
                                        color={'white'}
                                    >
                                        <option style={{ color: '#fff', backgroundColor: '#ED64A6' }} value="devnet">
                                            devnet
                                        </option>
                                        <option style={{ color: '#fff', backgroundColor: '#ED64A6' }} value="testnet">
                                            testnet
                                        </option>
                                        <option
                                            style={{ color: '#fff', backgroundColor: '#ED64A6' }}
                                            value="mainnet-beta"
                                        >
                                            mainnet
                                        </option>
                                    </Select>
                                </FormControl>
                                <FormControl w={{ base: '100%', md: '20%' }}>
                                    <Button
                                        colorScheme={'gray'}
                                        w="100%"
                                        type={'button'}
                                        onClick={() => setUpMonitors(address, network,version)}
                                    >
                                        Search
                                    </Button>
                                </FormControl>
                            </Stack>
                            {/* <Text mt={2} textAlign={'center'} color={error ? 'red.500' : 'gray.500'}>
                                {error
                                    ? 'Oh no an error occured! üò¢ Please try again later.'
                                    : "You won't receive any spam! ‚úåÔ∏è"}
                            </Text> */}
                        </Container>
                    </Flex>
                </Container>
            </Box>
            <Box as="div" bg={'gray.800'} w={'100%'} minH="82vh">
                {opsComplete === 'unloaded' && (
                    <Center color={'whiteAlpha.700'} py={20} fontSize={'2xl'}>
                        {' '}
                        Data Yet to be Loaded
                    </Center>
                )}
                {opsComplete === 'loading' && (
                    <Center color={'whiteAlpha.700'} py={20} fontSize={'2xl'}>
                        <Spinner thickness="4px" speed="0.65s" emptyColor="gray.200" color="blue.500" size="xl" />
                    </Center>
                )}
                {opsComplete === 'error' && (
                    <Center color={'whiteAlpha.700'} py={20} fontSize={'2xl'}>
                        {' '}
                        No NFTs Found
                    </Center>
                )}
                {opsComplete === 'loaded' && (
                    <Container maxW={'5xl'} rounded={'lg'} flexDirection={'column'}>
                        <Stack as={'div'} pt={'60px'} color={'white'}>
                            <Tabs variant={'soft-rounded'} colorScheme="pink">
                                <TabList>
                                    <Tab px={'30px'}>NFTs</Tab>
                                    <Tab px={'20px'}>Holders</Tab>
                                    <Tab px={'20px'}>Create & Airdrop</Tab>
                                    {/* <Tab px={"20px"}>Create</Tab> */}
                                </TabList>
                                {/* <TabIndicator mt="-1.5px" height="2px" bg="purple.700" borderRadius="1px" /> */}
                                <TabPanels>
                                    <TabPanel>
                                        <NftList
                                            address={address}
                                            network={network}
                                            setAllData={setAllData}
                                            opsComplete={opsComplete}
                                        />
                                    </TabPanel>
                                    <TabPanel>
                                        <OwnerList
                                            address={address}
                                            network={network}
                                            setAllData={setAllData}
                                            allData={allData}
                                        />
                                    </TabPanel>
                                    <TabPanel>
                                        {/* <Airdrop allData={allData} network={network} /> */}

                                        <CreateNAirdrop allData={allData} />
                                    </TabPanel>
                                    {/* <TabPanel>
                                    <CreateCompressed />
                                </TabPanel> */}
                                </TabPanels>
                            </Tabs>
                        </Stack>
                    </Container>
                )}
            </Box>

            {/* <footer className={styles.footer}>Powered by Calyptus and SHYFT</footer> */}
            <Box bg={'gray.900'} color={'gray.300'}>
                <Container
                    as={Stack}
                    maxW={'full'}
                    py={4}
                    direction={{ base: 'column', md: 'row' }}
                    spacing={4}
                    justify={{ base: 'center', md: 'space-between' }}
                    align={{ base: 'center', md: 'center' }}
                >
                    <Text fontFamily={'customCursive'} fontSize={'sm'}>
                        Made with love ‚ù§Ô∏è by Shyft & Calyptus
                    </Text>
                    <Stack direction={'row'} spacing={6}>
                        <Link href={'https://shyft.to/'} isExternal>
                            <Box bg={'gray.700'} px={4} py={2} borderRadius={'md'}>
                                <Image src="/shyft_logo.svg" alt="SHYFT" width={'86px'} />
                            </Box>
                        </Link>
                        <Link href={'https://calyptus.co/'} isExternal>
                            <Box bg={'whiteAlpha.900'} px={4} py={2} borderRadius={'md'}>
                                <Image
                                    src="https://calyptus.co/wp-content/uploads/logo.svg"
                                    alt="Calyptus"
                                    width={'90px'}
                                />
                            </Box>
                        </Link>
                        
                    </Stack>
                </Container>
            </Box>
        </div>
    );
};

export default Home;
